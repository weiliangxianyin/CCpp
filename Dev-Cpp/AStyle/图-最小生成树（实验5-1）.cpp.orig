#include <stdio.h>

#define MAXVEX 100 // 最大顶点数由用户定义
#define INFINITY 65535

typedef char VertexType; // 顶点类型应由用户定义
typedef int EdgeType; // 边上的权值类型应由用户定义

typedef struct {
	VertexType vexs[MAXVEX];
	EdgeType arc[MAXVEX][MAXVEX];
	int numNodes;
	int numEdges;
} MGraph;

typedef struct {
	int u;
	int v;
	int w;
} Edge;//定义边类型

void CreateMGraph(MGraph &G) {
	int u, v, w, i, j;
	for(i=0; i<G.numNodes; i++)
		for(j=0; j<G.numNodes; j++) {
			G.arc[i][j] = INFINITY;
		}
	for(i=1; i<=G.numEdges; i++) {
		scanf("%d %d %d",&u,&v,&w);
		G.arc[u][v] = w;
		G.arc[v][u] = w;
	}
}

void Output(Edge edges[],int n) {
	for(int i=0; i<n; i++)
		printf("%d %d %d\n",edges[i].u,edges[i].v, edges[i].w);
		//else printf("%d %d %d\n",edges[i].v,edges[i].u, edges[i].w);
}

int main(void) {
	void MiniSpanTree_Prim(MGraph G, int v0, Edge edges[]);
	MGraph G;
	Edge edges[MAXVEX];
	scanf("%d %d",&G.numNodes,&G.numEdges); // n表示图中顶点的个数，m表示图中边的个数
	CreateMGraph(G); // 建立图的存储结构（邻接矩阵）
	MiniSpanTree_Prim(G,0,edges); // 从编号为0的顶点开始应用普里姆算法构造最小生成树
	Output(edges,G.numNodes-1); // 输出最小生成树中的所有边（共G.numNodes-1）条
	return 0;
}

/*提交以下代码*/
void MiniSpanTree_Prim(MGraph G, int v0, Edge edges[]) {
	int i,j,k,min,count=0;
	int lowcost[MAXVEX],closet[MAXVEX];

	for(i=0; i<G.numNodes; i++) { //初始化边表
		if (i!=v0) {
			lowcost[i]=G.arc[v0][i];
			closet[i]=v0;
		} else {
			closet[i]=v0;
		}
	}

	for(i=1; i<G.numNodes; i++) {
		min=INFINITY;
		for(j=0; j<G.numNodes; j++) //寻找具有权重最小的边
			if (lowcost[j]!=0&&lowcost[j]<min) {
				min=lowcost[j];
				k=j;
			}

		edges[count].u =k ;  //保存边
		edges[count].v =closet[k] ;
		edges[count].w =min ;
		count++;

		lowcost[k]=0; //更新边表
		for(j=0; j<G.numNodes; j++) {
			if(G.arc[k][j]<lowcost[j]) {
				lowcost[j]=G.arc[k][j];
				closet[j]=k;
			}
		}
	}
}
