#include<stdio.h>

#define MAXVEX 100 // 最大顶点数由用户定义
#define INFINITY  65535

typedef char VertexType; // 顶点类型应由用户定义
typedef int EdgeType; // 边上的权值类型应由用户定义

typedef struct {
	VertexType vexs[MAXVEX];
	EdgeType arc[MAXVEX][MAXVEX];
	int numNodes;
	int numEdges;
} MGraph;

int label[MAXVEX]; // 存储从源点出发到其余各个顶点的最短路径上的最后一个顶点编号

int distance[MAXVEX]; // 存储从源点出发到其余各个顶点的最短距离

void CreateGraph(MGraph &G) {
	int i,j,k,w;

	for(i=0; i<G.numNodes; i++) // 初始化邻接矩阵
		for(j=0; j<G.numNodes; j++) G.arc[i][j] = INFINITY;

	for(k=0; k<G.numEdges; k++) { // 输入边信息填写有向图的邻接矩阵
		scanf("%d %d %d",&i,&j,&w);  // 边的信息包括顶点1，顶点2以及它们之间的距离
		G.arc[i][j] = w;
	}
}

void Output(int n, int v) {
	for(int i=0; i<n; i++) { //按照指定格式输出从源点v到其余各点的最短距离及其路径
		if(i!=v) {
			printf("v%d-v%d:%d[v%d",v,i,distance[i],i);
			for(int u=i; u!=v; u=label[u]) printf("<-v%d",label[u]);
			printf("]\n");
		}
	}
}

int main(void) {
	void Dijkstra(MGraph G, int v);
	MGraph graph;
	scanf("%d %d",&graph.numNodes,&graph.numEdges);
	CreateGraph(graph); //存储结构是邻接矩阵
	Dijkstra(graph, 0); //求从顶点0出发到其余各个顶点的最短距离及其路径
	Output(graph.numNodes, 0); //打印从顶点0出发到其余各个顶点的最短距离及其路径
	return 0;
}
/*提交以下代码*/
void Dijkstra(MGraph G, int v) {
    int n = G.numNodes;
    bool visited[MAXVEX];
    for (int i = 0; i < n; i++) {
        visited[i] = false;
        distance[i] = G.arc[v][i];
        label[i] = v;
    }
    visited[v] = true;

    for (int i = 1; i < n; i++) {
        int min = INFINITY;
        int index;

        for (int j = 0; j < n; j++) {
            if (!visited[j] && distance[j] < min) {
                min = distance[j];
                index = j;
            }
        }

        visited[index] = true;

        for (int j = 0; j < n; j++) {
            if (!visited[j] && distance[index] + G.arc[index][j] < distance[j]) {
                distance[j] = distance[index] + G.arc[index][j];
                label[j] = index;
            }
        }
    }
}
